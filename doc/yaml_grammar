stream ::= stream_begin directives headless_document documents
           footless_document stream_end
         | stream_begin directives headless_document footless_document
           stream_end
         | stream_begin directives headless_document stream_end
         | stream_begin directives footless_document stream_end
         | stream_begin directives headfootless_document stream_end
         | stream_begin directives documents stream_end

# TODO:  how does a stream begin?  encoding information?
stream_begin ::= lambda

# TODO:  how does a stream end?
stream_end ::= lambda

directives ::= directive directives
             | lambda

directive ::= version_directive
            | tag_directive

version_directive ::= "%YAML" digit "." digit

digit ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

tag_directive ::= "%TAG" handle uri

documents ::= document documents
            | lambda

document ::= document_begin nodes document_end

headless_document ::= nodes document_end

headfootless_document ::= nodes

footless_document ::= document_begin nodes

document_begin ::= "---"

document_end ::= "..."

nodes ::= node nodes
        | lambda

node ::= alias
       | scalar
       | sequence
       | mapping

# TODO:  define grammar for an alias
alias ::= lambda

scalar ::= string
        | null
        | tag string

string ::= [^!].*

null ::= "null"

tag ::= "!" local_tag
     | "!!" standard_tag
     | "!" handle "!" local_tag
     | "tag:" uri ":" local_tag

local_tag ::= [a-zA-Z_]+

standard_tag ::= "str"

handle ::= [a-zA-Z_]+

# TODO:  define grammar for standard URIs.  e.g., yaml.org,2002:
uri ::= lambda

sequence ::= flow_sequence
           | block_sequence

flow_sequence ::= "[" aws node aws suffix_listed_nodes aws "]"
                | "[" aws "]"

suffix_listed_nodes ::= "," aws node aws suffix_listed_nodes
                      | lambda

# a single whitespace character.  wsc stands for whitespace_character;  i
# chose this short name so i can easily use this production frequently.
wsc ::= space
      | tab
      | newline

# whitespace of arbitrary length (or no whitespace at all). i chose this short
# name so i can easily use this production frequently.
aws ::= wsc aws
     | lambda

# one or more whitespace characters
ws ::= wsc aws

# TODO:  define grammar for block sequence
block_sequence ::= lambda

mapping ::= flow_mapping
          | block_mapping

suffix_listed_pairs ::= "," aws key aws ":" aws suffix_listed_pairs
                      | lambda

key ::= scalar
      | complex_mapping_key

# TODO:  define complex mapping
complex_mapping_key ::= lambda

flow_mapping ::= "{" aws key aws ":" aws node aws suffix_listed_pairs aws "}"
               | "{" aws "}"

# TODO:  define grammar for a block mapping
block_mapping ::= lambda
