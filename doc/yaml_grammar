stream ::= stream_begin directives documents stream_end

# TODO:  how does a stream begin?  encoding information?
stream_begin ::= lambda

# TODO:  how does a stream end?
stream_end ::= lambda

directives ::= directive directives
             | lambda

directive ::= version_directive
            | tag_directive

version_directive ::= version_directive_symbol version_specification

version_directive_symbol ::= "%YAML"

version_specification ::= integer version_component_separator integer

integer ::= digit
          | digit integer

digit ::= "0" | "1" | ... | "9"

version_component_separator ::= "."

tag_directive ::= tag_directive_symbol handle uri

tag_directive_symbol ::= "%TAG"

# documents may be delimited, but don't always have to be.  for example, the
# first document may start immediately with nodes rather than with a leading
# start-of-document mark.
documents ::= delimited_documents
            | headerless_document delimited_documents footerless_document
            | headerless_document delimited_documents
            | delimited_documents footerless_document

delimited_documents ::= delimited_document delimited_documents
                      | lambda

delimited_document ::= document_begin nodes document_end

headerless_document ::= nodes newline document_end

footerless_document ::= document_begin newline nodes

document_begin ::= "---" whitespace

document_end ::= "..." whitespace

nodes ::= lambda
        | node nodes

node ::= scalar
       | sequence
       | mapping
       | anchor
       | alias

scalar ::= string
        | literal_style
        | folded_style
        | null
        | tag string

string ::= [^!] text

# string scalars can have newlines, but newlines are never significant.  they
# are always folded into single space characters.
text ::= any_character_newline_included_until_end_of_scope_as_determined_by_indentation

literal_style ::= literal_style_symbol literal_style_text

literal_style_symbol ::= "|" whitespace

literal_style_text ::= string
                     | string literal_style_text

# TODO:  folded style.  see section 2.3 in the standard
folded_style ::= lambda

null ::= "null"
       | "Null"
       | "NULL"
       | "~"

tag ::= "!" local_tag
      | "!!" standard_tag
      | "!" handle "!" whitespace local_tag
      | "tag:" uri ":" local_tag

local_tag ::= [a-zA-Z_]+

standard_tag ::= "str"

handle ::= [a-zA-Z_]+

# TODO:  define grammar for standard URIs.  e.g., yaml.org,2002:
uri ::= lambda

sequence ::= flow_sequence
           | block_sequence

flow_sequence ::= flow_sequence_begin node suffix_listed_nodes flow_sequence_end
                | flow_sequence_begin flow_sequence_end

flow_sequence_begin ::= "["

flow_sequence_end ::= "]"

suffix_listed_nodes ::= "," whitespace node suffix_listed_nodes
                      | lambda

# block sequence defines a sequence of elements of some kind, each in a line
block_sequence ::= block_sequence_element
                 | block_sequence_element block_sequence

block_sequence_element ::= block_sequence_element_begin node newline

block_sequence_element_begin ::= "-" whitespace

mapping ::= flow_mapping
          | block_mapping

flow_mapping ::= flow_mapping_begin key pair_separator node suffix_listed_pairs flow_mapping_end newline
               | flow_mapping_begin flow_mapping_end newline

flow_mapping_begin ::= "{"

flow_mapping_end ::= "}"

suffix_listed_pairs ::= "," key pair_separator suffix_listed_pairs
                      | lambda

key ::= scalar
      | complex_mapping_key

# block mapping defines a mapping of elements of some kind, each in a line
block_mapping ::= block_mapping_element
                | block_mapping_element block_mapping

block_mapping_element ::= key pair_separator node newline

pair_separator ::= ":" whitespace

# a complex mapping key is a key of arbitrary type.  this as opposed to regular
# keys, which must be scalars.
complex_mapping_key ::= complex_mapping_key_symbol node

complex_mapping_key_symbol ::= "?" whitespace

# anchors name a node so that it can later be referenced by its name (see
# alias)
anchor ::= anchor_symbol identifier node

identifier ::= identifier_prefix identifier_suffix

identifier_prefix ::= "_"
                    | lowercase_letter
                    | uppercase_letter

identifier_suffix ::= lambda
                    | identifier_suffix_character identifier_suffix

identifier_suffix_character ::= "_"
                              | lowercase_letter
                              | uppercase_letter
                              | digit

anchor_symbol ::= "&"

# aliases are the names given to a node earlier by an anchor (see anchor)
alias ::= alias_symbol string

alias_symbol ::= "*"

# Reference:  The C++ standard, as described by IBM's C++ Standard Library
# Reference document, page 18, "Escape Sequences"
#
# TODO:  I'm just being lazy, and reuse C++'s escape sequences.  Check if YAML
#        indeed uses the same escape sequences as C++.
escape_sequence ::= escape_sequence_symbol escape_sequence_value

escape_sequence_symbol ::= '\'

escape_sequence_value ::= escape_sequence_special_value
                        | escape_sequence_octal_number
                        | escape_sequence_hex_number

escape_sequence_special_value ::= '"'
                                | "'"
                                | '?'
                                | '\'
                                | 'a'
                                | 'b'
                                | 'f'
                                | 'n'
                                | 'r'
                                | 't'
                                | 'v'

escape_sequence_octal_number ::= octal_digit
                               | octal_digit octal_digit
                               | octal_digit octal_digit octal_digit

octal_digit ::= '0' | '1' | ... | '7'

escape_sequence_hex_number ::= escape_sequence_hex_symbol hex_number

escape_sequence_hex_symbol ::= 'x'

hex_number ::= hex_digit
             | hex_digit hex_number

hex_digit ::= '0' | '1' | ... | '9'
            | 'a' | 'b' | ... | 'f'
            | 'A' | 'B' | ... | 'F'
