stream ::= stream_begin directives headless_document documents
           footless_document stream_end
         | stream_begin directives headless_document footless_document
           stream_end
         | stream_begin directives headless_document stream_end
         | stream_begin directives footless_document stream_end
         | stream_begin directives headfootless_document stream_end
         | stream_begin directives documents stream_end

# TODO:  how does a stream begin?  encoding information?
stream_begin ::= lambda

# TODO:  how does a stream end?
stream_end ::= lambda

directives ::= directive directives
             | lambda

directive ::= version_directive
            | tag_directive

version_directive ::= "%YAML" digit "." digit

digit ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

tag_directive ::= "%TAG" handle uri

documents ::= document documents
            | lambda

document ::= document_begin nodes document_end

headless_document ::= nodes document_end

headfootless_document ::= nodes

footless_document ::= document_begin nodes

document_begin ::= "---"

document_end ::= "..."

nodes ::= node nodes
        | lambda

node ::= alias
       | scalar
       | sequence
       | mapping

# TODO:  define grammar for an alias
alias ::= lambda

scalar ::= string
        | null
        | tag string

string ::= [^!].*

null ::= "null"

tag ::= "!" local_tag
     | "!!" standard_tag
     | "!" handle "!" local_tag
     | "tag:" uri ":" local_tag

local_tag ::= [a-zA-Z_]+

standard_tag ::= "str"

handle ::= [a-zA-Z_]+

# TODO:  define grammar for standard URIs.  e.g., yaml.org,2002:
uri ::= lambda

sequence ::= flow_sequence
           | block_sequence

suffix_listed_nodes ::= "," whitespace node suffix_listed_nodes
                      | lambda

whitespace ::= space whitespace
             | tab whitespace
             | newline whitespace
             | lambda

flow_sequence ::= "[" node ( "," [ ]* node )* "]"
                | "[" [ ]* "]"

# TODO:  define grammar for block sequence
block_sequence ::= lambda

mapping ::= flow_mapping
          | block_mapping

flow_mapping ::= "{" scalar [ ]* ":" [ ]* node ( "," [ ]* scalar [ ]* ":" [ ]* node )* "}"
               | "{" complex_mapping [ ]* ":" [ ]* node ( "," [ ]* complex_mapping [ ]* ":" [ ]* node )* "}"
               | "{" [ ]* "}"

# TODO:  define complex mapping
complex_mapping ::= lambda

# TODO:  define grammar for a block mapping
block_mapping ::= lambda
