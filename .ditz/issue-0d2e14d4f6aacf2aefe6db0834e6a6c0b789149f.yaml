--- !ditz.rubyforge.org,2008-03-06/issue 
title: Define indentation productions in YAML grammar
desc: YAML relies on correct indentation in a similar manner to Python's indentation rules.  This a crucial characteristic of YAML.  We should imbue it in our grammar.
type: :bugfix
component: libyamlpp
release: "0.1"
reporter: Matan Nassau <matan.nassau@gmail.com>
status: :unstarted
disposition: 
creation_time: 2008-10-21 17:47:54.028558 Z
references: []

id: 0d2e14d4f6aacf2aefe6db0834e6a6c0b789149f
log_events: 
- - 2008-10-21 17:47:56.282667 Z
  - Matan Nassau <matan.nassau@gmail.com>
  - created
  - ""
- - 2008-10-21 23:31:36.770871 Z
  - Matan Nassau <matan.nassau@gmail.com>
  - commented
  - |-
    From http://www.secnetix.de/~olli/Python/block_indentation.hawk:
    
     How does the compiler parse the indentation?
    
     The parsing is well-defined and quite simple. Basically, changes to the indentation level are inserted as tokens into the token stream.
    
     The lexical analyzer (tokenizer) uses a stack to store indentation levels. At the beginning, the stack contains just the value 0, which is the leftmost position. Whenever a nested block begins, the new indentation level is pushed on the stack, and an "INDENT" token is inserted into the token stream which is passed to the parser. There can never be more than one "INDENT" token in a row.
    
     When a line is encountered with a smaller indentation level, values are popped from the stack until a value is on top which is equal to the new indentation level (if none is found, a syntax error occurs). For each value popped, a "DEDENT" token is generated. Obviously, there can be multiple "DEDENT" tokens in a row.
    
     At the end of the source code, "DEDENT" tokens are generated for each indentation level left on the stack, until just the 0 is left.
    
     Look at the following piece of sample code:
    
         >>> if foo:
         ...     if bar:
         ...         x = 42
         ... else:
         ...   print foo
         ...
    
     In the following table, you can see the tokens produced on the left, and the indentation stack on the right.
    
         <if> <foo> <:>                    [0]
         <INDENT> <if> <bar> <:>           [0, 4]
         <INDENT> <x> <=> <42>             [0, 4, 8]
         <DEDENT> <DEDENT> <else> <:>      [0]
         <INDENT> <print> <foo>            [0, 2]
         <DEDENT>                          [0]
    
     Note that after the lexical analysis (before parsing starts), there is no whitespace left in the list of tokens (except possibly within string literals, of course). In other words, the indentation is handled by the lexer, not by the parser.
    
     The parser then simply handles the "INDENT" and "DEDENT" tokens as block delimiters -- exactly like curly braces are handled by a C compiler.
    
     The above example is intentionally simple. There are more things to it, such as continuation lines. They are well-defined, too, and you can read about them in the Python Language Reference if you're interested, which includes a complete formal grammar of the language.
- - 2008-10-22 01:44:36.315721 Z
  - Matan Nassau <matan.nassau@gmail.com>
  - commented
  - maybe the indentation tracking shouldn't be in the grammar, but somewhere else?  the link i gave in a previous comment says the scope (indentation) tracking is done at lexical analysis, the tokenizer.
- - 2008-10-22 05:38:11.359488 Z
  - Alex Vallee <enzalx@gmail.com>
  - commented
  - |-
    This is probably something that ends up as a token attribute.
    
    Just like a programming language might produce an LITERAL_INT when it
    sees '57773' and this token would have a value decimal 57773.
    
    We can then apply this to the INDENT token and give the indentation
    level as the value of the token.
git_branch: 
claimer: 
